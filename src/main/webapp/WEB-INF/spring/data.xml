<?xml  version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd" >

    <!--Old-->
<!--    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="classpath:jdbc.properties, classpath:hibernate.properties"/>
    </bean>-->
    <!--Modern-->
<!--
    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:hibernate.properties</value>
            </list>
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
    </bean>
-->

    <!--<context:property-placeholder location="classpath:jdbc.properties, classpath:hibernate.properties" />-->


    <!-- Annotations like @Transactional -->
    <tx:annotation-driven/>

    <!-- HibernateTransactionManager -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!-- TODO: NON Production!   -->
<!--    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
<!--        <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close" >-->
            <property name="driverClassName" value="org.postgresql.Driver"/>
            <property name="url" value="jdbc:postgresql://localhost:5432/shwamera"/>
            <property name="username" value="postgres"/>
            <property name="password" value="strength"/>
        </bean>

        <!-- SessionFactory settings for Hibernate -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean" >
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="/WEB-INF/hibernate.cfg.xml" />
        <property name="hibernateProperties" >
            <props>
                <!-- @author sergeynazin. Defines whether my getSession()
                in JpaRepository will return a local threaded Session or else -->
                <!--FIXME: Some say this statement BREAKS Spring from setting proper session management and only suitable for Hibernate solely-->
                <!--<prop key="hibernate.current_session_context_class">thread</prop>-->

                <!-- Print all SQL to stdout. -->
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>

                <!-- DO NOT Drop and then re-create schema on SessionFactory build, for testing.
                 todo switch to "create"
                 -->
                <prop key="hibernate.hbm2ddl.auto">create</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQL95Dialect</prop>
                <prop key="hibernate.connection.charSet">UTF-8</prop>
                <prop key="hibernate.globally_quoted_identifiers">true</prop>
                <prop key="hibernate.auto_quote_keyword">true</prop>
            </props>
        </property>
    </bean>

    <!-- @Repository exception translation-->
    <bean id="persistenceExceptionTranslationPostProcessor" class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <bean id="repository" abstract="true" >
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <bean id="ingredientRepository" class="ru.mera.sergeynazin.repository.impl.HibernateRepositoryImpl" parent="repository" >
        <constructor-arg name="entity" ref="ingredient" />
    </bean>

    <bean id="shaurmaRepository" class="ru.mera.sergeynazin.repository.impl.HibernateRepositoryImpl" parent="repository" >
        <constructor-arg name="entity" ref="shaurma" />
    </bean>

    <bean id="menuEntryRepository" class="ru.mera.sergeynazin.repository.impl.HibernateRepositoryImpl" parent="repository" >
        <constructor-arg name="entity" ref="menuEntry" />
    </bean>

    <bean id="orderRepository" class="ru.mera.sergeynazin.repository.impl.HibernateRepositoryImpl" parent="repository" >
        <constructor-arg name="entity" ref="order" />
    </bean>

    <!-- scoped as prototype to be garbage collected after repository initialization -->
    <bean id="menuEntry" class="ru.mera.sergeynazin.model.MenuEntry" scope="prototype" />
    <bean id="ingredient" class="ru.mera.sergeynazin.model.Ingredient" scope="prototype" />

    <bean id="order" class="ru.mera.sergeynazin.model.Order" scope="prototype" />
    <bean id="shaurma" class="ru.mera.sergeynazin.model.Shaurma" scope="prototype" />

</beans>